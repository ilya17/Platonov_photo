{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-mask/lib/config.ts","ng://ngx-mask/lib/mask-applier.service.ts","ng://ngx-mask/lib/mask.service.ts","ng://ngx-mask/lib/mask.directive.ts","ng://ngx-mask/lib/mask.pipe.ts","ng://ngx-mask/lib/ngx-mask.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__read","o","m","ar","error","config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","patterns","0","pattern","RegExp","9","optional","X","symbol","A","S","M","H","h","timeMasks","withoutValidation","MaskApplierService","_config","_this","maskExpression","actualValue","_formatWithSeparators","str","thousandSeparatorChar","decimalChar","precision","x","split","decimals","res","replace","slice","rgx","test","substr","percentage","Number","getPrecision","Infinity","checkInputPrecision","inputValue","precisionRegEx","_charToRegExpExpression","precisionMatch","match","endsWith","substring","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","_a","mask","customPattern","applyMask","position","cb","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","ipError","filter","startsWith","_stripToDecimal","indexOf","base","thousandSeperatorCharEscaped","decimalMarkerEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","withoutDays","day1monthInput","includes","day2monthInput","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","find","val","maskSymbol","idx","join","char","Inject","args","Injectable","MaskService","document","_elementRef","_renderer","_super","isNumberValue","maskIsShown","selStart","selEnd","writingValue","onChange","_formElement","nativeElement","__","constructor","create","__extends","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","applyValueChanges","activeElement","clearIfNotMatchFn","map","curr","index","compare","symbolToReplace","currSymbol","replaceSymbol","inputVal","Error","_checkForIp","formElementProperty","_b","name","setProperty","checkSpecialCharAmount","arr","isArray","_removeMask","_removeSuffix","_removePrefix","_checkSymbols","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","maskExpretion","matcher","separatorExpression","toFixed","DOCUMENT","ElementRef","Renderer2","MaskDirective","_maskService","_maskValue","_position","onTouch","ngOnChanges","changes","currentValue","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","this_1","lastIndexOf","opt","length_1","onInput","el","_inputValue","selectionStart","caretShift","_backspaceShift","positionToApply","_code","_getActualInputLength","setSelectionRange","onBlur","onFocus","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","suffixCheckOnPressDelete","cursorStart","readOnly","ctrlKey","metaKey","writeValue","_arguments","generator","String","P","Promise","resolve","reject","fulfilled","rejected","then","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","onModelChange","_repeatPatternSymbols","maskExp","reduce","accum","currval","_start","_end","repeatNumber","rowMaskLen","requiredMask","Input","HostListener","MaskDirective_1","Directive","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","MaskPipe","transform","Pipe","pure","NgxMaskModule","forRoot","configValue","ngModule","NgxMaskModule_1","useValue","useFactory","_configFactory","deps","forChild","NgModule","exports","declarations","initConfig","Function"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n  suffix: string;\n  prefix: string;\n  thousandSeparator: string;\n  decimalMarker: '.' | ',';\n  clearIfNotMatch: boolean;\n  showTemplate: boolean;\n  showMaskTyped: boolean;\n  placeHolderCharacter: string;\n  shownMaskExpression: string;\n  dropSpecialCharacters: boolean | string[];\n  specialCharacters: string[];\n  hiddenInput: boolean | undefined;\n  validation: boolean;\n  separatorLimit: string;\n  allowNegativeNumbers: boolean;\n  patterns: {\n    [character: string]: {\n      pattern: RegExp;\n      optional?: boolean;\n      symbol?: string;\n    };\n  };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<IConfig> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<IConfig> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: '.',\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // tslint:disable-next-line: quotemark\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d'),\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true,\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*',\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]'),\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]'),\n    },\n    d: {\n      pattern: new RegExp('\\\\d'),\n    },\n    m: {\n      pattern: new RegExp('\\\\d'),\n    },\n    M: {\n      pattern: new RegExp('\\\\d'),\n    },\n    H: {\n      pattern: new RegExp('\\\\d'),\n    },\n    h: {\n      pattern: new RegExp('\\\\d'),\n    },\n    s: {\n      pattern: new RegExp('\\\\d'),\n    },\n  },\n};\n\nexport const timeMasks: string[] = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\n\nexport const withoutValidation: string[] = [\n  'percent',\n  'Hh',\n  's0',\n  'm0',\n  'separator',\n  'd0/M0/0000',\n  'd0/M0',\n  'd0',\n  'M0',\n];\n","import { Inject, Injectable } from '@angular/core';\n\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n  public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n  public hiddenInput: IConfig['hiddenInput'];\n  public showTemplate!: IConfig['showTemplate'];\n  public clearIfNotMatch!: IConfig['clearIfNotMatch'];\n  public maskExpression: string = '';\n  public actualValue: string = '';\n  public shownMaskExpression: string = '';\n  public maskSpecialCharacters!: IConfig['specialCharacters'];\n  public maskAvailablePatterns!: IConfig['patterns'];\n  public prefix!: IConfig['prefix'];\n  public suffix!: IConfig['suffix'];\n  public thousandSeparator!: IConfig['thousandSeparator'];\n  public decimalMarker!: IConfig['decimalMarker'];\n  public customPattern!: IConfig['patterns'];\n  public ipError?: boolean;\n  public showMaskTyped!: IConfig['showMaskTyped'];\n  public placeHolderCharacter!: IConfig['placeHolderCharacter'];\n  public validation: IConfig['validation'];\n  public separatorLimit: IConfig['separatorLimit'];\n  public allowNegativeNumbers: IConfig['allowNegativeNumbers'];\n\n  private _shift!: Set<number>;\n\n  public constructor(@Inject(config) protected _config: IConfig) {\n    this._shift = new Set();\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.hiddenInput = this._config.hiddenInput;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n  }\n\n  public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n  public applyMask(inputValue: string, maskExpression: string, position: number = 0, cb: Function = () => {}): string {\n    if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n      return '';\n    }\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n    if (!!this.suffix && inputValue.endsWith(this.suffix)) {\n      inputValue = inputValue.slice(0, inputValue.length - this.suffix.length);\n    }\n    const inputArray: string[] = inputValue.toString().split('');\n    if (maskExpression === 'IP') {\n      this.ipError = !!(inputArray.filter((i: string) => i === '.').length < 3 && inputArray.length < 7);\n      maskExpression = '099.099.099.099';\n    }\n    if (maskExpression.startsWith('percent')) {\n      if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)) {\n        inputValue = this._stripToDecimal(inputValue);\n        const precision: number = this.getPrecision(maskExpression);\n        inputValue = this.checkInputPrecision(inputValue, precision, '.');\n      }\n      if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n        const base: string = inputValue.substring(0, inputValue.indexOf('.') - 1);\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n      }\n      if (this.percentage(inputValue)) {\n        result = inputValue;\n      } else {\n        result = inputValue.substring(0, inputValue.length - 1);\n      }\n    } else if (maskExpression.startsWith('separator')) {\n      if (\n        inputValue.match('[wа-яА-Я]') ||\n        inputValue.match('[ЁёА-я]') ||\n        inputValue.match('[a-z]|[A-Z]') ||\n        inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) ||\n        inputValue.match('[^A-Za-z0-9,]')\n      ) {\n        inputValue = this._stripToDecimal(inputValue);\n      }\n\n      inputValue =\n        inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker\n          ? inputValue.slice(1, inputValue.length)\n          : inputValue;\n\n      // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n\n      const thousandSeperatorCharEscaped: string = this._charToRegExpExpression(this.thousandSeparator);\n      const decimalMarkerEscaped: string = this._charToRegExpExpression(this.decimalMarker);\n      const invalidChars: string = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'\n        .replace(thousandSeperatorCharEscaped, '')\n        .replace(decimalMarkerEscaped, '');\n\n      const invalidCharRegexp: RegExp = new RegExp('[' + invalidChars + ']');\n\n      if (inputValue.match(invalidCharRegexp)) {\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n\n      const precision: number = this.getPrecision(maskExpression);\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep: string = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n\n      const commaShift: number = result.indexOf(',') - inputValue.indexOf(',');\n      const shiftStep: number = result.length - inputValue.length;\n\n      if (shiftStep > 0 && result[position] !== ',') {\n        backspaceShift = true;\n        let _shift = 0;\n        do {\n          this._shift.add(position + _shift);\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (\n        (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n        (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)\n      ) {\n        this._shift.clear();\n        backspaceShift = true;\n        shift = shiftStep;\n        position += shiftStep;\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for (\n        // tslint:disable-next-line\n        let i: number = 0, inputSymbol: string = inputArray[0];\n        i < inputArray.length;\n        i++, inputSymbol = inputArray[i]\n      ) {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (\n          maskExpression[cursor + 1] === '*' &&\n          multi &&\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n        ) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n          result += inputSymbol;\n          multi = true;\n        } else if (\n          maskExpression[cursor + 1] === '?' &&\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n        ) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor]) ||\n          (this.hiddenInput &&\n            this.maskAvailablePatterns[maskExpression[cursor]] &&\n            this.maskAvailablePatterns[maskExpression[cursor]].symbol === inputSymbol)\n        ) {\n          if (maskExpression[cursor] === 'H') {\n            if (Number(inputSymbol) > 2) {\n              cursor += 1;\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n              this._shift.add(shiftStep + this.prefix.length || 0);\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'h') {\n            if (result === '2' && Number(inputSymbol) > 3) {\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'm') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n              this._shift.add(shiftStep + this.prefix.length || 0);\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 's') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n              this._shift.add(shiftStep + this.prefix.length || 0);\n              i--;\n              continue;\n            }\n          }\n          const daysCount = 31;\n          if (maskExpression[cursor] === 'd') {\n            if (Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n              cursor += 1;\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n              this._shift.add(shiftStep + this.prefix.length || 0);\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'M') {\n            const monthsCount = 12;\n            // mask without day\n            const withoutDays: boolean =\n              cursor === 0 &&\n              (Number(inputSymbol) > 2 ||\n                Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                inputValue[cursor + 1] === '/');\n            // day<10 && month<12 for input\n            const day1monthInput: boolean =\n              inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n              ((inputValue[cursor - 2] === '/' &&\n                Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount &&\n                inputValue[cursor] !== '/') ||\n                inputValue[cursor] === '/' ||\n                (inputValue[cursor - 3] === '/' &&\n                  Number(inputValue.slice(cursor - 2, cursor)) > monthsCount &&\n                  inputValue[cursor - 1] !== '/') ||\n                inputValue[cursor - 1] === '/');\n            // 10<day<31 && month<12 for input\n            const day2monthInput: boolean =\n              Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n              !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n              inputValue[cursor - 1] === '/' &&\n              (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n            // day<10 && month<12 for paste whole data\n            const day1monthPaste: boolean =\n              Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n              !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n              !inputValue.slice(cursor - 2, cursor).includes('/') &&\n              Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n            // 10<day<31 && month<12 for paste whole data\n            const day2monthPaste: boolean =\n              Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n              !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n              inputValue[cursor - 1] !== '/' &&\n              Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n\n            if (withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n              cursor += 1;\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n              this._shift.add(shiftStep + this.prefix.length || 0);\n              i--;\n              continue;\n            }\n          }\n          result += inputSymbol;\n          cursor++;\n        } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n          const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n          this._shift.add(shiftStep + this.prefix.length || 0);\n          i--;\n        } else if (\n          this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n          this.maskAvailablePatterns[maskExpression[cursor]] &&\n          this.maskAvailablePatterns[maskExpression[cursor]].optional\n        ) {\n          if (!!inputArray[cursor] && maskExpression !== '099.099.099.099') {\n            result += inputArray[cursor];\n          }\n          cursor++;\n          i--;\n        } else if (\n          this.maskExpression[cursor + 1] === '*' &&\n          this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n          this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n          multi\n        ) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (\n          this.maskExpression[cursor + 1] === '?' &&\n          this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n          this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n          multi\n        ) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (\n          this.showMaskTyped &&\n          this.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\n          inputSymbol !== this.placeHolderCharacter\n        ) {\n          stepBack = true;\n        }\n      }\n    }\n    if (\n      result.length + 1 === maskExpression.length &&\n      this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1\n    ) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n\n    let newPosition: number = position + 1;\n\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n\n    let actualShift: number = this._shift.has(position) ? shift : 0;\n    if (stepBack) {\n      actualShift--;\n    }\n\n    cb(actualShift, backspaceShift);\n    if (shift < 0) {\n      this._shift.clear();\n    }\n    let res = `${this.prefix}${result}${this.suffix}`;\n    if (result.length === 0) {\n      res = `${this.prefix}${result}`;\n    }\n    return res;\n  }\n\n  public _findSpecialChar(inputSymbol: string): undefined | string {\n    return this.maskSpecialCharacters.find((val: string) => val === inputSymbol);\n  }\n\n  protected _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n    this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n    return (\n      this.maskAvailablePatterns[maskSymbol] &&\n      this.maskAvailablePatterns[maskSymbol].pattern &&\n      this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\n    );\n  }\n\n  private _formatWithSeparators = (\n    str: string,\n    thousandSeparatorChar: string,\n    decimalChar: string,\n    precision: number\n  ) => {\n    const x: string[] = str.split(decimalChar);\n    const decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n    let res: string = x[0];\n    const separatorLimit: string = this.separatorLimit.replace(/\\s/g, '');\n    if (separatorLimit && +separatorLimit) {\n      if (res[0] === '-') {\n        res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n      } else {\n        res = res.slice(0, separatorLimit.length);\n      }\n    }\n    const rgx: RegExp = /(\\d+)(\\d{3})/;\n\n    while (thousandSeparatorChar && rgx.test(res)) {\n      res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n    }\n\n    if (precision === undefined) {\n      return res + decimals;\n    } else if (precision === 0) {\n      return res;\n    }\n    return res + decimals.substr(0, precision + 1);\n  };\n\n  private percentage = (str: string): boolean => {\n    return Number(str) >= 0 && Number(str) <= 100;\n  };\n\n  private getPrecision = (maskExpression: string): number => {\n    const x: string[] = maskExpression.split('.');\n    if (x.length > 1) {\n      return Number(x[x.length - 1]);\n    }\n\n    return Infinity;\n  };\n\n  private checkInputPrecision = (\n    inputValue: string,\n    precision: number,\n    decimalMarker: IConfig['decimalMarker']\n  ): string => {\n    if (precision < Infinity) {\n      const precisionRegEx: RegExp = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n\n      const precisionMatch: RegExpMatchArray | null = inputValue.match(precisionRegEx);\n      if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      } else if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n    }\n    return inputValue;\n  };\n\n  private _stripToDecimal(str: string): string {\n    return str\n      .split('')\n      .filter((i: string, idx: number) => {\n        return i.match('^-?\\\\d') || i === '.' || i === ',' || (i === '-' && idx === 0 && this.allowNegativeNumbers);\n      })\n      .join('');\n  }\n\n  private _charToRegExpExpression(char: string): string {\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? '\\\\' + char : char;\n    }\n    return char;\n  }\n}\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { config, IConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n  public maskExpression: string = '';\n  public isNumberValue: boolean = false;\n  public placeHolderCharacter: string = '_';\n  public maskIsShown: string = '';\n  public selStart: number | null = null;\n  public selEnd: number | null = null;\n\n  /**\n   * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n   * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n   */\n  public writingValue: boolean = false;\n\n  private _formElement: HTMLInputElement;\n\n  public onChange = (_: any) => {};\n\n  public constructor(\n    @Inject(DOCUMENT) private document: any,\n    @Inject(config) protected _config: IConfig,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2\n  ) {\n    super(_config);\n    this._formElement = this._elementRef.nativeElement;\n  }\n\n  // tslint:disable-next-line:cyclomatic-complexity\n  public applyMask(inputValue: string, maskExpression: string, position: number = 0, cb: Function = () => {}): string {\n    if (!maskExpression) {\n      return inputValue;\n    }\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n    if (this.maskExpression === 'IP' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return this.prefix + this.maskIsShown;\n    }\n    const getSymbol: string = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n    let newInputValue = '';\n    if (this.hiddenInput !== undefined) {\n      let actualResult: string[] = this.actualValue.split('');\n      // tslint:disable no-unused-expression\n      inputValue !== '' && actualResult.length\n        ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n          ? inputValue.length > actualResult.length\n            ? actualResult.splice(this.selStart, 0, getSymbol)\n            : inputValue.length < actualResult.length\n            ? actualResult.length - inputValue.length === 1\n              ? actualResult.splice(this.selStart - 1, 1)\n              : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n            : null\n          : null\n        : (actualResult = []);\n      // tslint:enable no-unused-expression\n      newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n    }\n    newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    const result: string = super.applyMask(newInputValue, maskExpression, position, cb);\n    this.actualValue = this.getActualValue(result);\n\n    // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n    if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n      this.decimalMarker = ',';\n    }\n\n    // b) remove decimal marker from list of special characters to mask\n    if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n      this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== this.decimalMarker);\n    }\n\n    this.formControlResult(result);\n\n    if (!this.showMaskTyped) {\n      if (this.hiddenInput) {\n        return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n      }\n      return result;\n    }\n    const resLen: number = result.length;\n    const prefNmask: string = this.prefix + this.maskIsShown;\n    return result + (this.maskExpression === 'IP' ? prefNmask : prefNmask.slice(resLen));\n  }\n\n  public applyValueChanges(position: number = 0, cb: Function = () => {}): void {\n    this._formElement.value = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n    if (this._formElement === this.document.activeElement) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n\n  public hideInput(inputValue: string, maskExpression: string): string {\n    return inputValue\n      .split('')\n      .map((curr: string, index: number) => {\n        if (\n          this.maskAvailablePatterns &&\n          this.maskAvailablePatterns[maskExpression[index]] &&\n          this.maskAvailablePatterns[maskExpression[index]].symbol\n        ) {\n          return this.maskAvailablePatterns[maskExpression[index]].symbol;\n        }\n        return curr;\n      })\n      .join('');\n  }\n\n  // this function is not necessary, it checks result against maskExpression\n  public getActualValue(res: string): string {\n    const compare: string[] = res\n      .split('')\n      .filter(\n        (symbol: string, i: number) =>\n          this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n          (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i])\n      );\n    if (compare.join('') === res) {\n      return compare.join('');\n    }\n    return res;\n  }\n\n  public shiftTypedSymbols(inputValue: string): string {\n    let symbolToReplace = '';\n    const newInputValue: string[] =\n      (inputValue &&\n        inputValue.split('').map((currSymbol: string, index: number) => {\n          if (\n            this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n            inputValue[index + 1] !== this.maskExpression[index + 1]\n          ) {\n            symbolToReplace = currSymbol;\n            return inputValue[index + 1];\n          }\n          if (symbolToReplace.length) {\n            const replaceSymbol: string = symbolToReplace;\n            symbolToReplace = '';\n            return replaceSymbol;\n          }\n          return currSymbol;\n        })) ||\n      [];\n    return newInputValue.join('');\n  }\n\n  public showMaskInInput(inputVal?: string): string {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        return this._checkForIp(inputVal);\n      }\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n    return '';\n  }\n\n  public clearIfNotMatchFn(): void {\n    if (\n      this.clearIfNotMatch &&\n      this.prefix.length + this.maskExpression.length + this.suffix.length !==\n        this._formElement.value.replace(/_/g, '').length\n    ) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(this._formElement.value, this.maskExpression);\n    }\n  }\n\n  public set formElementProperty([name, value]: [string, string | boolean]) {\n    this._renderer.setProperty(this._formElement, name, value);\n  }\n\n  public checkSpecialCharAmount(mask: string): number {\n    const chars: string[] = mask.split('').filter((item: string) => this._findSpecialChar(item));\n    return chars.length;\n  }\n\n  private _checkForIp(inputVal: string): string {\n    if (inputVal === '#') {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    const arr: string[] = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      if (inputVal[i].match('\\\\d')) {\n        arr.push(inputVal[i]);\n      }\n    }\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n    return '';\n  }\n\n  /**\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n   * model value too. Therefore, we don't trigger onChange in this scenario.\n   * @param inputValue the current form input value\n   */\n  private formControlResult(inputValue: string): void {\n    if (!this.writingValue) {\n      if (Array.isArray(this.dropSpecialCharacters)) {\n        this.onChange(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters));\n      } else if (this.dropSpecialCharacters) {\n        this.onChange(this._checkSymbols(inputValue));\n      } else {\n        this.onChange(this._removeSuffix(this._removePrefix(inputValue)));\n      }\n    }\n  }\n\n  private _removeMask(value: string, specialCharactersForRemove: string[]): string {\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n  }\n\n  private _removePrefix(value: string): string {\n    if (!this.prefix) {\n      return value;\n    }\n    return value ? value.replace(this.prefix, '') : value;\n  }\n\n  private _removeSuffix(value: string): string {\n    if (!this.suffix) {\n      return value;\n    }\n    return value ? value.replace(this.suffix, '') : value;\n  }\n\n  private _retrieveSeparatorValue(result: string): string {\n    return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n  }\n\n  private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n    return new RegExp(specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'), 'gi');\n  }\n\n  private _checkSymbols(result: string): string | number | undefined | null {\n    if (result === '') {\n      return result;\n    }\n\n    const separatorPrecision: number | null = this._retrieveSeparatorPrecision(this.maskExpression);\n    let separatorValue: string = this._retrieveSeparatorValue(result);\n    if (this.decimalMarker !== '.') {\n      separatorValue = separatorValue.replace(this.decimalMarker, '.');\n    }\n\n    if (this.isNumberValue) {\n      if (separatorPrecision) {\n        if (result === this.decimalMarker) {\n          return null;\n        }\n        return this._checkPrecision(this.maskExpression, separatorValue);\n      } else {\n        return Number(separatorValue);\n      }\n    } else {\n      return separatorValue;\n    }\n  }\n\n  // TODO should think about helpers or separting decimal precision to own property\n  private _retrieveSeparatorPrecision(maskExpretion: string): number | null {\n    const matcher: RegExpMatchArray | null = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n\n  private _checkPrecision(separatorExpression: string, separatorValue: string): number | string {\n    if (separatorExpression.indexOf('2') > 0) {\n      return Number(separatorValue).toFixed(2);\n    }\n    return Number(separatorValue);\n  }\n}\n","import {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n} from '@angular/forms';\nimport { Directive, forwardRef, HostListener, Inject, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { CustomKeyboardEvent } from './custom-keyboard-event';\nimport { config, IConfig, timeMasks, withoutValidation } from './config';\nimport { MaskService } from './mask.service';\n\n// tslint:disable deprecation\n@Directive({\n  selector: '[mask]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true,\n    },\n    MaskService,\n  ],\n})\nexport class MaskDirective implements ControlValueAccessor, OnChanges, Validator {\n  @Input('mask') public maskExpression: string = '';\n  @Input() public specialCharacters: IConfig['specialCharacters'] = [];\n  @Input() public patterns: IConfig['patterns'] = {};\n  @Input() public prefix: IConfig['prefix'] = '';\n  @Input() public suffix: IConfig['suffix'] = '';\n  @Input() public thousandSeparator: IConfig['thousandSeparator'] = ' ';\n  @Input() public decimalMarker: IConfig['decimalMarker'] = '.';\n  @Input() public dropSpecialCharacters: IConfig['dropSpecialCharacters'] | null = null;\n  @Input() public hiddenInput: IConfig['hiddenInput'] | null = null;\n  @Input() public showMaskTyped: IConfig['showMaskTyped'] | null = null;\n  @Input() public placeHolderCharacter: IConfig['placeHolderCharacter'] | null = null;\n  @Input() public shownMaskExpression: IConfig['shownMaskExpression'] | null = null;\n  @Input() public showTemplate: IConfig['showTemplate'] | null = null;\n  @Input() public clearIfNotMatch: IConfig['clearIfNotMatch'] | null = null;\n  @Input() public validation: IConfig['validation'] | null = null;\n  @Input() public separatorLimit: IConfig['separatorLimit'] | null = null;\n  @Input() public allowNegativeNumbers: IConfig['allowNegativeNumbers'] | null = null;\n  private _maskValue: string = '';\n  private _inputValue!: string;\n  private _position: number | null = null;\n  private _start!: number;\n  private _end!: number;\n  private _code!: string;\n\n  public constructor(\n    @Inject(DOCUMENT) private document: any,\n    private _maskService: MaskService,\n    @Inject(config) protected _config: IConfig\n  ) {}\n\n  public onChange = (_: any) => {};\n  public onTouch = () => {};\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n    } = changes;\n    if (maskExpression) {\n      this._maskValue = maskExpression.currentValue || '';\n    }\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n      }\n    }\n    // Only overwrite the mask available patterns if a pattern has actually been passed in\n    if (patterns && patterns.currentValue) {\n      this._maskService.maskAvailablePatterns = patterns.currentValue;\n    }\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n    }\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(\n          (c: string) => c !== '-'\n        );\n      }\n    }\n    this._applyMask();\n  }\n\n  // tslint:disable-next-line: cyclomatic-complexity\n  public validate({ value }: FormControl): ValidationErrors | null {\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskValue.startsWith('separator')) {\n      return null;\n    }\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n      for (const key in this._maskService.maskAvailablePatterns) {\n        if (\n          this._maskService.maskAvailablePatterns[key].optional &&\n          this._maskService.maskAvailablePatterns[key].optional === true\n        ) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt: string = this._maskValue\n              .split('')\n              .filter((i: string) => i === key)\n              .join('');\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n      if (\n        this._maskValue.indexOf('{') === 1 &&\n        value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4\n      ) {\n        return null;\n      }\n      if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n        return null;\n      } else if (\n        (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\n        (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?')) ||\n        this._maskValue.indexOf('{') === 1\n      ) {\n        return this._createValidationError(value);\n      }\n      if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n        const length: number = this._maskService.dropSpecialCharacters\n          ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\n          : this._maskValue.length - counterOfOpt;\n        if (value.toString().length < length) {\n          return this._createValidationError(value);\n        }\n      }\n    }\n    return null;\n  }\n\n  @HostListener('input', ['$event'])\n  public onInput(e: CustomKeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    this._inputValue = el.value;\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n    const position: number =\n      el.selectionStart === 1\n        ? (el.selectionStart as number) + this._maskService.prefix.length\n        : (el.selectionStart as number);\n    let caretShift = 0;\n    let backspaceShift = false;\n    this._maskService.applyValueChanges(position, (shift: number, _backspaceShift: boolean) => {\n      caretShift = shift;\n      backspaceShift = _backspaceShift;\n    });\n    // only set the selection if the element is active\n    if (this.document.activeElement !== el) {\n      return;\n    }\n    this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n    let positionToApply: number = this._position\n      ? this._inputValue.length + position + caretShift\n      : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n    if (positionToApply > this._getActualInputLength()) {\n      positionToApply = this._getActualInputLength();\n    }\n    el.setSelectionRange(positionToApply, positionToApply);\n    if ((this.maskExpression.includes('H') || this.maskExpression.includes('M')) && caretShift === 0) {\n      el.setSelectionRange((el.selectionStart as number) + 1, (el.selectionStart as number) + 1);\n    }\n    this._position = null;\n  }\n\n  @HostListener('blur')\n  public onBlur(): void {\n    if (this._maskValue) {\n      this._maskService.clearIfNotMatchFn();\n    }\n    this.onTouch();\n  }\n\n  @HostListener('click', ['$event'])\n  public onFocus(e: MouseEvent | CustomKeyboardEvent): void {\n    if (!this._maskValue) {\n      return;\n    }\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    const posStart = 0;\n    const posEnd = 0;\n    if (\n      el !== null &&\n      el.selectionStart !== null &&\n      el.selectionStart === el.selectionEnd &&\n      el.selectionStart > this._maskService.prefix.length &&\n      // tslint:disable-next-line\n      (e as any).keyCode !== 38\n    )\n      if (this._maskService.showMaskTyped) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    const nextValue: string | null =\n      !el.value || el.value === this._maskService.prefix\n        ? this._maskService.prefix + this._maskService.maskIsShown\n        : el.value;\n\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n    if (el.value !== nextValue) {\n      el.value = nextValue;\n    }\n\n    /** fix of cursor position with prefix when mouse click occur */\n    if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n\n    /** select only inserted text */\n    if ((el.selectionEnd as number) > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  }\n\n  // tslint:disable-next-line: cyclomatic-complexity\n  @HostListener('keydown', ['$event'])\n  public onKeyDown(e: CustomKeyboardEvent): void {\n    if (!this._maskValue) {\n      return;\n    }\n    this._code = e.code ? e.code : e.key;\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    this._inputValue = el.value;\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n    if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n      if (e.keyCode === 8 && el.value.length === 0) {\n        el.selectionStart = el.selectionEnd;\n      }\n      if (e.keyCode === 8 && (el.selectionStart as number) !== 0) {\n        // If specialChars is false, (shouldn't ever happen) then set to the defaults\n        this.specialCharacters = this.specialCharacters || this._config.specialCharacters;\n        if (this.prefix.length > 1 && (el.selectionStart as number) <= this.prefix.length) {\n          el.setSelectionRange(this.prefix.length, this.prefix.length);\n        } else {\n          if (this._inputValue.length !== (el.selectionStart as number) && (el.selectionStart as number) !== 1) {\n            while (\n              this.specialCharacters.includes(this._inputValue[(el.selectionStart as number) - 1].toString()) &&\n              ((this.prefix.length >= 1 && (el.selectionStart as number) > this.prefix.length) ||\n                this.prefix.length === 0)\n            ) {\n              el.setSelectionRange((el.selectionStart as number) - 1, (el.selectionStart as number) - 1);\n            }\n          }\n          this.suffixCheckOnPressDelete(e.keyCode, el);\n        }\n      }\n      this.suffixCheckOnPressDelete(e.keyCode, el);\n      if (\n        this._maskService.prefix.length &&\n        (el.selectionStart as number) <= this._maskService.prefix.length &&\n        (el.selectionEnd as number) <= this._maskService.prefix.length\n      ) {\n        e.preventDefault();\n      }\n      const cursorStart: number | null = el.selectionStart;\n      // this.onFocus(e);\n      if (\n        e.keyCode === 8 &&\n        !el.readOnly &&\n        cursorStart === 0 &&\n        el.selectionEnd === el.value.length &&\n        el.value.length !== 0\n      ) {\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n        this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n      }\n    }\n    if (\n      !!this.suffix &&\n      this.suffix.length > 1 &&\n      this._inputValue.length - this.suffix.length < (el.selectionStart as number)\n    ) {\n      el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n    } else if (\n      (e.keyCode === 65 && e.ctrlKey === true) || // Ctrl+ A\n      (e.keyCode === 65 && e.metaKey === true) // Cmd + A (Mac)\n    ) {\n      el.setSelectionRange(0, this._getActualInputLength());\n      e.preventDefault();\n    }\n    this._maskService.selStart = el.selectionStart;\n    this._maskService.selEnd = el.selectionEnd;\n  }\n\n  /** It writes the value in the input */\n  public async writeValue(inputValue: string | number): Promise<void> {\n    if (inputValue === undefined) {\n      inputValue = '';\n    }\n    if (typeof inputValue === 'number') {\n      inputValue = String(inputValue);\n      inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n      this._maskService.isNumberValue = true;\n    }\n    if (\n      (inputValue && this._maskService.maskExpression) ||\n      (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\n    ) {\n      // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n      this._maskService.writingValue = true;\n      this._maskService.formElementProperty = [\n        'value',\n        this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n      ];\n      // Let the service know we've finished writing value\n      this._maskService.writingValue = false;\n    } else {\n      this._maskService.formElementProperty = ['value', inputValue];\n    }\n    this._inputValue = inputValue;\n  }\n\n  public registerOnChange(fn: any): void {\n    this.onChange = fn;\n    this._maskService.onChange = this.onChange;\n  }\n\n  public registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n\n  public suffixCheckOnPressDelete(keyCode: number, el: HTMLInputElement): void {\n    if (keyCode === 46 && this.suffix.length > 0) {\n      if (this._inputValue.length - this.suffix.length <= (el.selectionStart as number)) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      }\n    }\n    if (keyCode === 8) {\n      if (this.suffix.length > 1 && this._inputValue.length - this.suffix.length < (el.selectionStart as number)) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      }\n      if (this.suffix.length === 1 && this._inputValue.length === (el.selectionStart as number)) {\n        el.setSelectionRange((el.selectionStart as number) - 1, (el.selectionStart as number) - 1);\n      }\n    }\n  }\n\n  /** It disables the input element */\n  public setDisabledState(isDisabled: boolean): void {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n\n  @HostListener('ngModelChange', ['$event'])\n  // tslint:disable-next-line: no-any\n  public onModelChange(e: any): void {\n    if (!e) {\n      this._maskService.actualValue = '';\n    }\n  }\n\n  private _repeatPatternSymbols(maskExp: string): string {\n    return (\n      (maskExp.match(/{[0-9]+}/) &&\n        maskExp.split('').reduce((accum: string, currval: string, index: number): string => {\n          this._start = currval === '{' ? index : this._start;\n\n          if (currval !== '}') {\n            return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n          }\n          this._end = index;\n          const repeatNumber: number = Number(maskExp.slice(this._start + 1, this._end));\n          const repaceWith: string = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n          return accum + repaceWith;\n        }, '')) ||\n      maskExp\n    );\n  }\n  // tslint:disable-next-line:no-any\n  private _applyMask(): any {\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = [\n      'value',\n      this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n    ];\n  }\n\n  private _validateTime(value: string): ValidationErrors | null {\n    const rowMaskLen: number = this._maskValue.split('').filter((s: string) => s !== ':').length;\n    if (value === null || value.length === 0) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n\n    if ((+value[value.length - 1] === 0 && value.length < rowMaskLen) || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n\n    return null;\n  }\n\n  private _getActualInputLength() {\n    return (\n      this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length\n    );\n  }\n\n  private _createValidationError(actualValue: string): ValidationErrors {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue,\n      },\n    };\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { MaskApplierService } from './mask-applier.service';\nimport { IConfig } from './config';\n\n@Pipe({\n  name: 'mask',\n  pure: true,\n})\nexport class MaskPipe implements PipeTransform {\n  public constructor(private _maskService: MaskApplierService) {}\n\n  public transform(\n    value: string | number,\n    mask: string | [string, IConfig['patterns']],\n    thousandSeparator: string | null = null\n  ): string {\n    if (!value && typeof value !== 'number') {\n      return '';\n    }\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator;\n    }\n    if (typeof mask === 'string') {\n      return this._maskService.applyMask(`${value}`, mask);\n    }\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n\n@NgModule({\n  exports: [MaskDirective, MaskPipe],\n  declarations: [MaskDirective, MaskPipe],\n})\nexport class NgxMaskModule {\n  public static forRoot(configValue?: optionsConfig | (() => optionsConfig)): ModuleWithProviders<NgxMaskModule> {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [\n        {\n          provide: NEW_CONFIG,\n          useValue: configValue,\n        },\n        {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig,\n        },\n        {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG],\n        },\n        MaskApplierService,\n      ],\n    };\n  }\n  public static forChild(): ModuleWithProviders<NgxMaskModule> {\n    return {\n      ngModule: NgxMaskModule,\n    };\n  }\n}\n\n/**\n * @internal\n */\nexport function _configFactory(\n  initConfig: optionsConfig,\n  configValue: optionsConfig | (() => optionsConfig)\n): optionsConfig {\n  return configValue instanceof Function ? { ...initConfig, ...configValue() } : { ...initConfig, ...configValue };\n}\n"]}